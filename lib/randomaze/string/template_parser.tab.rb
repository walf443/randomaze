#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "lib/randomaze/string/template_parser.y".
#

require 'racc/parser'


require 'strscan'
require 'set'


module Randomaze

  module String

    class TemplateParser < Racc::Parser

module_eval <<'..end lib/randomaze/string/template_parser.y modeval..idc7a9dcb04d', 'lib/randomaze/string/template_parser.y', 135

def self.parse str
  new.parse(str)
end

def parse str
  raise Racc::ParseError if str.empty?
  @tokens = self.class.tokenize str
  result = do_parse
  arr = []
  tmp = result
  while tmp[1].kind_of? Array
    arr << tmp.first
    tmp = tmp[1]
  end
  arr << tmp.first

  arr
end

def meta_set str
  case str
  when '\w'
    # FIXME: \w is not generate multi byte character.
    ['a'..'z', 'A'..'Z', 0..9, '_']
  when '\d'
    [0..9]
  else
    raise Racc::ParseError, "not support meta character #{first}"
  end
end

def next_token
  @tokens.shift
end

def self.tokenize str
  tokens = []
  s = StringScanner.new str
  state = :default
  until s.eos? do
    case state
    when :default
      case
      when s.scan(/\\[a-z]/)
        tokens.push([:META_SET, s[0]])
      when s.scan(/\./)
        tokens.push([:DOT, s[0]])
      when s.scan(/\?/)
        tokens.push([:QUESTION, s[0]])
      when s.scan(/\*(\?)?/)
        tokens.push([:ASTERISK, s[0]])
      when s.scan(/\+(\?)?/)
        tokens.push([:PLUS, s[0]])
      when s.scan(/\[/)
        state = :set_expr
        tokens.push([:EXPR_START, '[' ])
        tokens.push([:SETS_START, '[' ])
      when s.skip(/\(\?#.+\)/) # COMMENT
      when s.scan(/\((\?:)?/)
        tokens.push([:SELECT_START, '(' ])
      when s.scan(/\)/)
        tokens.push([:SELECT_END, ')' ])
      when s.scan(/\|/)
        tokens.push(['|', '|' ])
      when s.scan(/\{/)
        state = :count_expr
        tokens.push([:COUNT_START, '{' ])
      when s.scan(%r![^\)|\\\[\{\}\]]+!)
        tokens.push [:IDENT_WORD, s[0]]
      when s.scan(%r!\\([\?\[\]\{\}\*\+\^\$\\\.\|\(\)])!)
        tokens.push [:IDENT_WORD, s[1]]
      else
        char = s.getch
        tokens.push [char, char]
      end
    when :count_expr
      case
      when s.scan(/\}/)
        state = :default
        tokens.push([:COUNT_END, '}' ])
      when s.scan(/[0-9]+/)
        tokens.push([:NUMBER, s[0].to_i ])
      when s.scan(/,/)
        tokens.push([',', ','])
      else
        char = s.getch
        raise Racc::ParseError, "invalid char #{char}"
      end

    when :set_expr
      case
      when s.scan(/\\[a-z]/)
        tokens.push([:META_SET, s[0]])
      when s.scan(/\]/)
        state = :default
        tokens.push([:SETS_END, ']' ])
      when s.scan(/([\w])-([\w])/)
        tokens.push([ :RANGE, [ s[1], s[2] ] ])

      when s.scan(/[0-9]+/)
        raise Racc::ParseError, "#{s[0]} is wrong" if s[0].size > 1
        tokens.push([:NUMCHAR, s[0].to_i ])
      when s.scan(/[a-zA-Z]/)
        tokens.push([:ALPHA, s[0] ])
      when s.scan(/-/)
        tokens.push(['-', s[0] ])
      else
        char = s.getch
        tokens.push [:IDENT, char]
      end
    else
      raise "must not happend!!"
    end
  end

  tokens
end

..end lib/randomaze/string/template_parser.y modeval..idc7a9dcb04d

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 0, 24, :_reduce_none,
 2, 24, :_reduce_2,
 1, 25, :_reduce_none,
 1, 25, :_reduce_4,
 3, 25, :_reduce_5,
 4, 25, :_reduce_6,
 3, 25, :_reduce_7,
 1, 25, :_reduce_8,
 2, 25, :_reduce_9,
 2, 25, :_reduce_10,
 2, 25, :_reduce_11,
 3, 25, :_reduce_12,
 3, 27, :_reduce_13,
 3, 26, :_reduce_14,
 4, 26, :_reduce_15,
 5, 26, :_reduce_16,
 1, 26, :_reduce_17,
 1, 26, :_reduce_18,
 1, 26, :_reduce_19,
 0, 28, :_reduce_none,
 2, 28, :_reduce_21,
 1, 29, :_reduce_none,
 1, 29, :_reduce_23,
 1, 30, :_reduce_24,
 1, 31, :_reduce_none,
 1, 31, :_reduce_none,
 2, 31, :_reduce_none,
 1, 31, :_reduce_28,
 1, 32, :_reduce_none,
 1, 32, :_reduce_none ]

racc_reduce_n = 31

racc_shift_n = 45

racc_action_table = [
    27,     1,     3,     5,     9,    27,     6,     7,    10,    12,
    13,    28,    30,    32,    34,    25,    28,    30,    32,    34,
    25,     1,     3,     5,    21,    15,     6,     7,     1,     3,
     5,     9,    15,     6,     7,    10,    12,    13,     1,     3,
     5,     9,    20,     6,     7,    10,    12,    13,     9,    42,
    43,    39,    10,    12,    13,    36,    37,    23,    15,    19,
    41,     8,    44 ]

racc_action_check = [
    29,     0,     0,     0,     6,    19,     0,     0,     6,     6,
     6,    29,    29,    29,    29,    29,    19,    19,    19,    19,
    19,     4,     4,     4,     9,     4,     4,     4,     5,     5,
     5,     3,    22,     5,     5,     3,     3,     3,    15,    15,
    15,    18,     8,    15,    15,    18,    18,    18,    23,    37,
    37,    26,    23,    23,    23,    21,    21,    16,    16,     7,
    32,     2,    42 ]

racc_action_pointer = [
    -1,   nil,    61,    20,    19,    26,    -7,    50,    42,    12,
   nil,   nil,   nil,   nil,   nil,    36,    52,   nil,    30,    -2,
   nil,    42,    26,    37,   nil,   nil,    41,   nil,   nil,    -7,
   nil,   nil,    40,   nil,   nil,   nil,   nil,    37,   nil,   nil,
   nil,   nil,    49,   nil,   nil ]

racc_action_default = [
    -1,    -3,   -31,    -4,    -1,   -31,    -8,   -31,   -31,   -31,
   -17,   -10,   -18,   -19,    -2,   -31,   -31,   -11,    -9,   -20,
    45,   -31,    -7,    -5,   -12,   -30,   -31,   -28,   -24,   -20,
   -25,   -22,   -31,   -23,   -29,   -26,   -14,   -31,    -6,   -13,
   -21,   -27,   -31,   -15,   -16 ]

racc_goto_table = [
    11,    16,    26,    17,     2,    18,   nil,   nil,    14,   nil,
   nil,    22,    40,   nil,   nil,    24,   nil,   nil,   nil,   nil,
    38 ]

racc_goto_check = [
     3,     2,     5,     3,     1,     4,   nil,   nil,     1,   nil,
   nil,     2,     5,   nil,   nil,     3,   nil,   nil,   nil,   nil,
     3 ]

racc_goto_pointer = [
   nil,     4,    -4,    -3,    -2,   -17,   nil,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,     4,   nil,   nil,   nil,    29,    31,    33,    35 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :IDENT_WORD => 2,
 :DOT => 3,
 :SELECT_START => 4,
 :SELECT_END => 5,
 "|" => 6,
 :META_SET => 7,
 :EXPR_START => 8,
 :SETS_START => 9,
 :SETS_END => 10,
 :COUNT_START => 11,
 :NUMBER => 12,
 :COUNT_END => 13,
 "," => 14,
 :QUESTION => 15,
 :ASTERISK => 16,
 :PLUS => 17,
 :RANGE => 18,
 :IDENT => 19,
 :meta_set => 20,
 :ALPHA => 21,
 :NUMCHAR => 22 }

racc_use_result_var = true

racc_nt_base = 23

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'IDENT_WORD',
'DOT',
'SELECT_START',
'SELECT_END',
'"|"',
'META_SET',
'EXPR_START',
'SETS_START',
'SETS_END',
'COUNT_START',
'NUMBER',
'COUNT_END',
'","',
'QUESTION',
'ASTERISK',
'PLUS',
'RANGE',
'IDENT',
'meta_set',
'ALPHA',
'NUMCHAR',
'$start',
'exprs',
'expr',
'count_expr',
'sets_expr',
'sets',
'set',
'range',
'ident',
'alnum']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 8
  def _reduce_2( val, _values, result )
              result = val
   result
  end
.,.,

 # reduce 3 omitted

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 15
  def _reduce_4( val, _values, result )
              token = val.shift
              result = [ ['a'..'z', 'A'..'Z', 0..9, '_'], 1 ]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 19
  def _reduce_5( val, _values, result )
              result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 23
  def _reduce_6( val, _values, result )
              result = [ val[1], val[3] ]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 27
  def _reduce_7( val, _values, result )
              result = Set.new([val[0], val[2]])
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 32
  def _reduce_8( val, _values, result )
              token = val.shift
              result = [ meta_set(token), 1]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 36
  def _reduce_9( val, _values, result )
              result = [ val[1], 1]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 41
  def _reduce_10( val, _values, result )
              token, count = val
              result = [ ['a'..'z', 'A'..'Z', 0..9, '_'], count ]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 46
  def _reduce_11( val, _values, result )
              token, count = val
              result = [ meta_set(token), count ]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 56
  def _reduce_12( val, _values, result )
              first = val.shift
              result = nil
              if first == '['
                result = val
              else
                result = first
              end
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 67
  def _reduce_13( val, _values, result )
              array = []
              val[1].flatten.each do |range|
                next unless range
                array << range
              end

              result = array.uniq
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 72
  def _reduce_14( val, _values, result )
               result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 76
  def _reduce_15( val, _values, result )
               result = [ val[1], nil ]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 80
  def _reduce_16( val, _values, result )
               result = val[1]..val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 84
  def _reduce_17( val, _values, result )
               result = 0..1
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 88
  def _reduce_18( val, _values, result )
               result = [0, nil]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 92
  def _reduce_19( val, _values, result )
               result = [1, nil]
   result
  end
.,.,

 # reduce 20 omitted

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 98
  def _reduce_21( val, _values, result )
              result = val
   result
  end
.,.,

 # reduce 22 omitted

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 104
  def _reduce_23( val, _values, result )
              result = val
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 114
  def _reduce_24( val, _values, result )
              first,last = val.first.to_a
              if first =~ /\d/ && last =~ /\d/
                first = first.to_i
                last  = last.to_i
              end
              result = first..last
   result
  end
.,.,

 # reduce 25 omitted

 # reduce 26 omitted

 # reduce 27 omitted

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 123
  def _reduce_28( val, _values, result )
              first = val.shift
              result = meta_set(first)
   result
  end
.,.,

 # reduce 29 omitted

 # reduce 30 omitted

 def _reduce_none( val, _values, result )
  result
 end

    end   # class TemplateParser

  end   # module String

end   # module Randomaze
