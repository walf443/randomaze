#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "lib/randomaze/string/template_parser.y".
#

require 'racc/parser'


require 'strscan'


module Randomaze

  module String

    class TemplateParser < Racc::Parser

module_eval <<'..end lib/randomaze/string/template_parser.y modeval..id025522376c', 'lib/randomaze/string/template_parser.y', 106

def self.parse str
  new.parse(str)
end

def parse str
  raise Racc::ParseError if str.empty?
  @tokens = self.class.tokenize str
  result = do_parse
  arr = []
  tmp = result
  while tmp[1].kind_of? Array
    arr << tmp.first
    tmp = tmp[1]
  end
  arr << tmp.first

  arr
end

def meta_set str
  case str
  when '\w'
    # FIXME: \w is not generate multi byte character.
    ['a'..'z', 'A'..'Z', 0..9, '_']
  when '\d'
    [0..9]
  else
    raise Racc::ParseError, "not support meta character #{first}"
  end
end

def next_token
  @tokens.shift
end

def self.tokenize str
  tokens = []
  s = StringScanner.new str
  state = :default
  until s.eos? do
    case state
    when :default
      case
      when s.scan(/\\./)
        tokens.push([:META_SET, s[0]])
      when s.scan(/\./)
        tokens.push([:DOT, s[0]])
      when s.scan(/\?/)
        tokens.push([:QUESTION, s[0]])
      when s.scan(/\[/)
        state = :set_expr
        tokens.push([:EXPR_START, '[' ])
        tokens.push([:SETS_START, '[' ])
      when s.scan(/\{/)
        state = :count_expr
        tokens.push([:COUNT_START, '{' ])
      when s.scan(%r![^\\\[\{\}\]]+!)
        tokens.push [:IDENT_WORD, s[0]]
      else
        char = s.getch
        tokens.push [char, char]
      end
    when :count_expr
      case
      when s.scan(/\}/)
        state = :default
        tokens.push([:COUNT_END, '}' ])
      when s.scan(/[0-9]+/)
        tokens.push([:NUMBER, s[0].to_i ])
      when s.scan(/,/)
        tokens.push([',', ','])
      else
        char = s.getch
        raise Racc::ParseError, "invalid char #{char}"
      end

    when :set_expr
      case
      when s.scan(/\\./)
        tokens.push([:META_SET, s[0]])
      when s.scan(/\]/)
        state = :default
        tokens.push([:SETS_END, ']' ])
      when s.scan(/([\w])-([\w])/)
        tokens.push([ :RANGE, [ s[1], s[2] ] ])

      when s.scan(/[0-9]+/)
        raise Racc::ParseError, "#{s[0]} is wrong" if s[0].size > 1
        tokens.push([:NUMCHAR, s[0].to_i ])
      when s.scan(/[a-zA-Z]/)
        tokens.push([:ALPHA, s[0] ])
      when s.scan(/-/)
        tokens.push(['-', s[0] ])
      else
        char = s.getch
        tokens.push [:IDENT, char]
      end
    else
      raise "must not happend!!"
    end
  end

  tokens
end

..end lib/randomaze/string/template_parser.y modeval..id025522376c

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 0, 19, :_reduce_none,
 2, 19, :_reduce_2,
 1, 20, :_reduce_none,
 1, 20, :_reduce_4,
 1, 20, :_reduce_5,
 2, 20, :_reduce_6,
 2, 20, :_reduce_7,
 3, 20, :_reduce_8,
 3, 22, :_reduce_9,
 3, 21, :_reduce_10,
 5, 21, :_reduce_11,
 1, 21, :_reduce_12,
 0, 23, :_reduce_none,
 2, 23, :_reduce_14,
 1, 24, :_reduce_none,
 1, 24, :_reduce_16,
 1, 25, :_reduce_17,
 1, 26, :_reduce_none,
 1, 26, :_reduce_none,
 2, 26, :_reduce_none,
 1, 26, :_reduce_21,
 1, 27, :_reduce_none,
 1, 27, :_reduce_none ]

racc_reduce_n = 24

racc_shift_n = 36

racc_action_table = [
    22,    31,     8,     8,     8,    22,     7,     7,     7,    18,
    20,    23,    25,    27,    18,    20,    23,    25,    27,     1,
     2,     3,     4,     1,     2,     3,     4,    30,    29,    28,
    13,    15,    12,    33,    34,    35 ]

racc_action_check = [
    12,    17,     3,     2,    11,    19,     3,     2,    11,    12,
    12,    12,    12,    12,    19,    19,    19,    19,    19,     0,
     0,     0,     0,     6,     6,     6,     6,    15,    15,    13,
     5,     8,     4,    23,    29,    34 ]

racc_action_pointer = [
    17,   nil,    -5,    -6,    26,    30,    21,   nil,    22,   nil,
   nil,    -4,    -4,    29,   nil,    17,   nil,    -6,   nil,     1,
   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,   nil,    25,   nil ]

racc_action_default = [
    -1,    -3,    -4,    -5,   -24,   -24,    -1,   -12,   -24,    -6,
    -7,   -24,   -13,   -24,    -2,   -24,    -8,   -24,   -17,   -13,
   -18,   -15,   -21,   -24,   -16,   -22,   -19,   -23,    36,   -24,
   -10,    -9,   -14,   -20,   -24,   -11 ]

racc_goto_table = [
     9,    10,     5,    17,    11,   nil,   nil,   nil,    14,    16,
    32 ]

racc_goto_check = [
     3,     3,     1,     5,     4,   nil,   nil,   nil,     1,     3,
     5 ]

racc_goto_pointer = [
   nil,     2,   nil,    -2,     0,    -9,   nil,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,     6,   nil,   nil,   nil,    19,    21,    24,    26 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :IDENT_WORD => 2,
 :DOT => 3,
 :META_SET => 4,
 :EXPR_START => 5,
 :SETS_START => 6,
 :SETS_END => 7,
 :COUNT_START => 8,
 :NUMBER => 9,
 :COUNT_END => 10,
 "," => 11,
 :QUESTION => 12,
 :RANGE => 13,
 :IDENT => 14,
 :meta_set => 15,
 :ALPHA => 16,
 :NUMCHAR => 17 }

racc_use_result_var = true

racc_nt_base = 18

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'IDENT_WORD',
'DOT',
'META_SET',
'EXPR_START',
'SETS_START',
'SETS_END',
'COUNT_START',
'NUMBER',
'COUNT_END',
'","',
'QUESTION',
'RANGE',
'IDENT',
'meta_set',
'ALPHA',
'NUMCHAR',
'$start',
'exprs',
'expr',
'count_expr',
'sets_expr',
'sets',
'set',
'range',
'ident',
'alnum']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 8
  def _reduce_2( val, _values, result )
              result = val
   result
  end
.,.,

 # reduce 3 omitted

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 15
  def _reduce_4( val, _values, result )
              token = val.shift
              result = [ ['a'..'z', 'A'..'Z', 0..9, '_'], 1 ]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 20
  def _reduce_5( val, _values, result )
              token = val.shift
              result = [ meta_set(token), 1]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 25
  def _reduce_6( val, _values, result )
              token, count = val
              result = [ ['a'..'z', 'A'..'Z', 0..9, '_'], count ]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 30
  def _reduce_7( val, _values, result )
              token, count = val
              result = [ meta_set(token), count ]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 40
  def _reduce_8( val, _values, result )
              first = val.shift
              result = nil
              if first == '['
                result = val
              else
                result = first
              end
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 51
  def _reduce_9( val, _values, result )
              array = []
              val[1].flatten.each do |range|
                next unless range
                array << range
              end

              result = array.uniq
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 56
  def _reduce_10( val, _values, result )
               result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 60
  def _reduce_11( val, _values, result )
               result = val[1]..val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 64
  def _reduce_12( val, _values, result )
               result = 0..1
   result
  end
.,.,

 # reduce 13 omitted

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 70
  def _reduce_14( val, _values, result )
              result = val
   result
  end
.,.,

 # reduce 15 omitted

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 76
  def _reduce_16( val, _values, result )
              result = val
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 86
  def _reduce_17( val, _values, result )
              first,last = val.first.to_a
              if first =~ /\d/ && last =~ /\d/
                first = first.to_i
                last  = last.to_i
              end
              result = first..last
   result
  end
.,.,

 # reduce 18 omitted

 # reduce 19 omitted

 # reduce 20 omitted

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 95
  def _reduce_21( val, _values, result )
              first = val.shift
              result = meta_set(first)
   result
  end
.,.,

 # reduce 22 omitted

 # reduce 23 omitted

 def _reduce_none( val, _values, result )
  result
 end

    end   # class TemplateParser

  end   # module String

end   # module Randomaze
