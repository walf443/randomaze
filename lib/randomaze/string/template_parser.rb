#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "lib/randomaze/string/template_parser.y".
#

require 'racc/parser'


require 'strscan'


module Randomaze

  module String

    class TemplateParser < Racc::Parser

module_eval <<'..end lib/randomaze/string/template_parser.y modeval..id0f3d07a9ca', 'lib/randomaze/string/template_parser.y', 52

def self.parse str
  new.parse(str)
end

def parse str
  raise Racc::ParseError if str.empty?
  @tokens = []
  @s = StringScanner.new(str)
  scan_str
  result = do_parse
  arr = []
  tmp = result
  while tmp[1].kind_of? Array
    arr << tmp.first
    tmp = tmp[1]
  end
  arr << tmp.first

  arr
end

def next_token
  @tokens.shift
end

def scan_str
  set_start_fg = false
  until @s.eos? do
    if set_start_fg
      case
      when @s.scan(/\]/)
        set_start_fg = false
        @tokens.push([:SETS_END, '[' ])
      when @s.scan(/[0-9]+/)
        raise Racc::ParseError, "#{@s[0]} is wrong" if @s[0].size > 1
        @tokens.push([:NUMCHAR, @s[0].to_i ])
      when @s.scan(/[a-zA-Z]/)
        @tokens.push([:ALPHA, @s[0] ])
      when @s.scan(/-/)
        @tokens.push(['-', @s[0] ])
      else
        raise Racc::ParseError, "#{@s[0]} is wrong"
      end
    else
      case
      when @s.scan(/\[/)
        set_start_fg = true
        @tokens.push([:EXPR_START, '[' ])
        @tokens.push([:SETS_START, '[' ])
      when @s.scan(/\{/)
        @tokens.push([:COUNT_START, '{' ])
      when @s.scan(/\}/)
        @tokens.push([:COUNT_END, '}' ])
      when @s.scan(/[0-9]+/)
        @tokens.push([:NUMBER, @s[0].to_i ])
      else
        s = @s.getch
        @tokens.push [s, s]
      end
    end
  end
end

..end lib/randomaze/string/template_parser.y modeval..id0f3d07a9ca

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 0, 12, :_reduce_none,
 2, 12, :_reduce_2,
 3, 13, :_reduce_3,
 3, 14, :_reduce_4,
 3, 15, :_reduce_5,
 0, 16, :_reduce_none,
 2, 16, :_reduce_7,
 3, 17, :_reduce_8,
 1, 18, :_reduce_none,
 1, 18, :_reduce_none ]

racc_reduce_n = 11

racc_shift_n = 22

racc_action_table = [
    12,    13,    12,    13,    12,    13,    15,     8,     2,     2,
    16,     5,    18,    19,     4,    21 ]

racc_action_check = [
     5,     5,    18,    18,    10,    10,     6,     4,     0,     3,
     9,     2,    11,    15,     1,    19 ]

racc_action_pointer = [
     6,    14,     8,     7,     7,    -9,     1,   nil,   nil,     6,
    -5,     4,   nil,   nil,   nil,     7,   nil,   nil,    -7,     8,
   nil,   nil ]

racc_action_default = [
    -1,   -11,   -11,    -1,   -11,    -6,   -11,    -2,    22,   -11,
    -6,   -11,    -9,   -10,    -3,   -11,    -4,    -7,   -11,   -11,
    -8,    -5 ]

racc_goto_table = [
     9,     1,    14,     6,     7,    17,    20 ]

racc_goto_check = [
     5,     1,     4,     3,     1,     5,     7 ]

racc_goto_pointer = [
   nil,     1,   nil,     1,    -4,    -5,   nil,   -12 ]

racc_goto_default = [
   nil,   nil,     3,   nil,   nil,   nil,    10,    11 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :EXPR_START => 2,
 :SETS_START => 3,
 :SETS_END => 4,
 :COUNT_START => 5,
 :NUMBER => 6,
 :COUNT_END => 7,
 "-" => 8,
 :ALPHA => 9,
 :NUMCHAR => 10 }

racc_use_result_var = true

racc_nt_base = 11

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'EXPR_START',
'SETS_START',
'SETS_END',
'COUNT_START',
'NUMBER',
'COUNT_END',
'"-"',
'ALPHA',
'NUMCHAR',
'$start',
'exprs',
'expr',
'sets_expr',
'count_expr',
'sets',
'set',
'alnum']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 8
  def _reduce_2( val, _values, result )
              result = val
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 14
  def _reduce_3( val, _values, result )
              val.shift
              result = val
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 25
  def _reduce_4( val, _values, result )
              array = []
              val[1].flatten.each do |range|
                next unless range
                array << range
              end

              result = array.uniq
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 30
  def _reduce_5( val, _values, result )
              result = val[1]
   result
  end
.,.,

 # reduce 6 omitted

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 36
  def _reduce_7( val, _values, result )
              result = val
   result
  end
.,.,

module_eval <<'.,.,', 'lib/randomaze/string/template_parser.y', 41
  def _reduce_8( val, _values, result )
              result = val[0]..val[2]
   result
  end
.,.,

 # reduce 9 omitted

 # reduce 10 omitted

 def _reduce_none( val, _values, result )
  result
 end

    end   # class TemplateParser

  end   # module String

end   # module Randomaze
